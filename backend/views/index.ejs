<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Data Table</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <style>
    /* Style for the collapse effect */
    .collapsible-content {
      display: none;
      padding: 10px;
      border: 1px solid #ddd;
    }
    .collapsible-header {
      cursor: pointer;
      background-color: #f1f1f1;
      padding: 10px;
    }
    .collapsible-header:hover {
      background-color: #ddd;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1 class="my-4">Data Table</h1>
    <table class="table table-bordered table-striped">
      <thead class="thead-dark">
        <tr>
          <th>Name</th>
          <th>Click Event</th>
        </tr>
      </thead>
      <tbody id="tableBody">
        <!-- Table rows will be dynamically added here -->
      </tbody>
    </table>
  </div>

  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script>
    // Fetch data from backend
    fetch('http://localhost:3000/data')
      .then(response => response.json())
      .then(data => {
        const tableBody = document.getElementById('tableBody');
        data.forEach(item => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${item.localStorageData.name}</td>
            <td class="collapsible-header" onclick="toggleCollapse(this)"> ${item.text} </td>
          `;
          const detailsRow = document.createElement('tr');
          detailsRow.classList.add('collapsible-content');
          let detailsHtml = '<td colspan="2"><table class="table table-bordered">';
          Object.entries(item).forEach(([key, value]) => {
            detailsHtml += renderDetails(key, value);
          });
          detailsHtml += '</table></td>';
          detailsRow.innerHTML = detailsHtml;
          tableBody.appendChild(row);
          tableBody.appendChild(detailsRow);
        });
      })
      .catch(error => {
        console.error('Error fetching data:', error);
      });

    // Function to toggle collapse effect
    function toggleCollapse(element) {
      const detailsRow = element.parentNode.nextElementSibling;
      detailsRow.style.display = (detailsRow.style.display === 'none') ? 'table-row' : 'none';
    }

    // Recursive function to render nested object details
    function renderDetails(key, value) {
      if (typeof value === 'object') {
        let html = '';
        Object.entries(value).forEach(([subKey, subValue]) => {
          html += renderDetails(subKey, subValue);
        });
        return html;
      } else {
        return `<tr><th>${key}</th><td>${value}</td></tr>`;
      }
    }
  </script>
</body>
</html>